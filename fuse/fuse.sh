#!/bin/sh

set -eu
F="${0%.sh}_sh.go"
trap "rm -f '$F~'" EXIT
exec > "$F~"

cat <<EOT
package ${GOPACKAGE:-fuse}

//go:generate $0${1:+ $*}

// Code generated by $0. DO NOT EDIT.

import (
	"bazil.org/fuse"
)
EOT

generate() {
	local pkg="$1"
	local fn="$2" vars="${3:-}" types="${4:-}"
	local args= params= v=

	# prepare list of arguments
	for v in $vars; do
		args="${args:+$args, }$v @@T@@"
		params="${params:+$params, }$v"
	done

	# replace types one at the type
	for v in $types; do
		args="$(echo "$args" | sed -e "s/@@T@@/$v/")"
	done

	cat <<EOT

// $fn is a proxy function to the standard $pkg.$fn()
func $fn($args) $pkg.MountOption {
	return $pkg.$fn($params)
}
EOT

}

for n in \
	AllowDev \
	AllowNonEmptyMount \
	AllowOther \
	AllowSUID \
	AsyncRead \
	CongestionThreshold:n:uint16 \
	DaemonTimeout:name:string \
	DefaultPermissions \
	FSName:name:string \
	LockingFlock \
	LockingPOSIX \
	MaxBackground:n:uint16 \
	MaxReadahead:n:uint32 \
	ReadOnly \
	Subtype:fstype:string \
	WritebackCache \
	; do

	generate fuse $(echo "$n" | tr ':' ' ')
done

generate_types() {
	local pkg="$1" n=
	shift

	for n; do
		cat <<EOT

// $n is a proxy to the standard $pkg.$n type
type $n = $pkg.$n
EOT
	done

}

generate_types fuse \
	MountOption

# format
gofmt -w -l -s "$F~"

if ! diff -u "$F" "$F~" >&2; then
	mv "$F~" "$F"
fi
