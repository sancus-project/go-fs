package fuse

//go:generate ./fuse.sh

// Code generated by ./fuse.sh. DO NOT EDIT.

import (
	"bazil.org/fuse"
)

// AllowDev is a proxy function to the standard fuse.AllowDev()
func AllowDev() fuse.MountOption {
	return fuse.AllowDev()
}

// AllowNonEmptyMount is a proxy function to the standard fuse.AllowNonEmptyMount()
func AllowNonEmptyMount() fuse.MountOption {
	return fuse.AllowNonEmptyMount()
}

// AllowOther is a proxy function to the standard fuse.AllowOther()
func AllowOther() fuse.MountOption {
	return fuse.AllowOther()
}

// AllowSUID is a proxy function to the standard fuse.AllowSUID()
func AllowSUID() fuse.MountOption {
	return fuse.AllowSUID()
}

// AsyncRead is a proxy function to the standard fuse.AsyncRead()
func AsyncRead() fuse.MountOption {
	return fuse.AsyncRead()
}

// CongestionThreshold is a proxy function to the standard fuse.CongestionThreshold()
func CongestionThreshold(n uint16) fuse.MountOption {
	return fuse.CongestionThreshold(n)
}

// DaemonTimeout is a proxy function to the standard fuse.DaemonTimeout()
func DaemonTimeout(name string) fuse.MountOption {
	return fuse.DaemonTimeout(name)
}

// DefaultPermissions is a proxy function to the standard fuse.DefaultPermissions()
func DefaultPermissions() fuse.MountOption {
	return fuse.DefaultPermissions()
}

// FSName is a proxy function to the standard fuse.FSName()
func FSName(name string) fuse.MountOption {
	return fuse.FSName(name)
}

// LockingFlock is a proxy function to the standard fuse.LockingFlock()
func LockingFlock() fuse.MountOption {
	return fuse.LockingFlock()
}

// LockingPOSIX is a proxy function to the standard fuse.LockingPOSIX()
func LockingPOSIX() fuse.MountOption {
	return fuse.LockingPOSIX()
}

// MaxBackground is a proxy function to the standard fuse.MaxBackground()
func MaxBackground(n uint16) fuse.MountOption {
	return fuse.MaxBackground(n)
}

// MaxReadahead is a proxy function to the standard fuse.MaxReadahead()
func MaxReadahead(n uint32) fuse.MountOption {
	return fuse.MaxReadahead(n)
}

// ReadOnly is a proxy function to the standard fuse.ReadOnly()
func ReadOnly() fuse.MountOption {
	return fuse.ReadOnly()
}

// Subtype is a proxy function to the standard fuse.Subtype()
func Subtype(fstype string) fuse.MountOption {
	return fuse.Subtype(fstype)
}

// WritebackCache is a proxy function to the standard fuse.WritebackCache()
func WritebackCache() fuse.MountOption {
	return fuse.WritebackCache()
}

// MountOption is a proxy to the standard fuse.MountOption type
type MountOption = fuse.MountOption
